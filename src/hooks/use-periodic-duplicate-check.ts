import { useEffect, useRef, useCallback } from 'react';
import { useDuplicateDetection, type Contact } from './use-duplicate-detection';

type PeriodicDuplicateCheckOptions = {
  intervalMinutes?: number; // Intervalo em minutos
  enabled?: boolean; // Se deve executar ou n√£o
  onDuplicatesFound?: (duplicates: any[]) => void; // Callback quando duplicados s√£o encontrados
  silent?: boolean; // Se deve mostrar notifica√ß√µes ou n√£o
};

export function usePeriodicDuplicateCheck(
  contacts: Contact[],
  options: PeriodicDuplicateCheckOptions = {}
) {
  const {
    intervalMinutes = 30, // Verificar a cada 30 minutos por padr√£o
    enabled = true,
    onDuplicatesFound,
    silent = false
  } = options;

  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const lastCheckRef = useRef<Date | null>(null);
  const { duplicates, hasDuplicates, duplicateStats } = useDuplicateDetection(contacts);

  // Fun√ß√£o para executar a verifica√ß√£o
  const runCheck = useCallback(() => {
    if (!enabled || !contacts.length) return;

    const now = new Date();
    lastCheckRef.current = now;

    // Se encontrou duplicados e n√£o √© silencioso
    if (hasDuplicates && !silent) {
      console.log(`[${now.toLocaleTimeString()}] Verifica√ß√£o peri√≥dica: ${duplicates.length} grupos de duplicados encontrados`);
      
      // Callback personalizado se fornecido
      if (onDuplicatesFound) {
        onDuplicatesFound(duplicates);
      }
    } else if (hasDuplicates) {
      console.log(`[${now.toLocaleTimeString()}] Verifica√ß√£o peri√≥dica: ${duplicates.length} grupos de duplicados encontrados (silencioso)`);
    } else {
      console.log(`[${now.toLocaleTimeString()}] Verifica√ß√£o peri√≥dica: Nenhum duplicado encontrado`);
    }
  }, [enabled, contacts.length, hasDuplicates, duplicates, silent, onDuplicatesFound]);

  // Iniciar verifica√ß√£o peri√≥dica
  useEffect(() => {
    if (!enabled) {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      return;
    }

    // Executar verifica√ß√£o imediatamente na primeira vez
    runCheck();

    // Configurar intervalo
    const intervalMs = intervalMinutes * 60 * 1000;
    intervalRef.current = setInterval(runCheck, intervalMs);

    console.log(`üîç Verifica√ß√£o peri√≥dica de duplicados iniciada: a cada ${intervalMinutes} minutos`);

    // Cleanup
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
        console.log('üîç Verifica√ß√£o peri√≥dica de duplicados parada');
      }
    };
  }, [enabled, intervalMinutes, runCheck]);

  // Fun√ß√£o para for√ßar uma verifica√ß√£o manual
  const forceCheck = useCallback(() => {
    console.log('üîç Verifica√ß√£o manual de duplicados solicitada');
    runCheck();
  }, [runCheck]);

  // Fun√ß√£o para parar a verifica√ß√£o peri√≥dica
  const stopPeriodicCheck = useCallback(() => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
      console.log('üîç Verifica√ß√£o peri√≥dica de duplicados parada manualmente');
    }
  }, []);

  // Fun√ß√£o para reiniciar a verifica√ß√£o peri√≥dica
  const restartPeriodicCheck = useCallback(() => {
    stopPeriodicCheck();
    
    if (enabled) {
      const intervalMs = intervalMinutes * 60 * 1000;
      intervalRef.current = setInterval(runCheck, intervalMs);
      console.log(`üîç Verifica√ß√£o peri√≥dica de duplicados reiniciada: a cada ${intervalMinutes} minutos`);
    }
  }, [enabled, intervalMinutes, runCheck, stopPeriodicCheck]);

  return {
    // Estado atual
    isRunning: !!intervalRef.current,
    lastCheck: lastCheckRef.current,
    nextCheck: lastCheckRef.current ? new Date(lastCheckRef.current.getTime() + (intervalMinutes * 60 * 1000)) : null,
    
    // Controles
    forceCheck,
    stopPeriodicCheck,
    restartPeriodicCheck,
    
    // Estat√≠sticas da verifica√ß√£o
    duplicates,
    hasDuplicates,
    duplicateStats,
    
    // Configura√ß√µes
    intervalMinutes,
    enabled
  };
}
