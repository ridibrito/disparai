// Script para diagnosticar problemas de permiss√£o no perfil
// Execute: node examples/debug-profile-permissions.js

const { createClient } = require('@supabase/supabase-js');

// Configura√ß√µes do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'your-service-role-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugProfilePermissions() {
  try {
    console.log('üîç Diagnosticando problemas de permiss√£o no perfil...\n');
    
    // 1. Listar todos os usu√°rios
    console.log('1Ô∏è‚É£ Listando usu√°rios...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, full_name, organization_id')
      .limit(10);
    
    if (usersError) {
      console.log('‚ùå Erro ao buscar usu√°rios:', usersError);
    } else {
      console.log('‚úÖ Usu√°rios encontrados:');
      users.forEach(user => {
        console.log(`   - ${user.full_name} (${user.email}) - Org: ${user.organization_id}`);
      });
    }
    
    // 2. Listar organiza√ß√µes
    console.log('\n2Ô∏è‚É£ Listando organiza√ß√µes...');
    const { data: organizations, error: orgsError } = await supabase
      .from('organizations')
      .select('id, name, company_name, owner_id')
      .limit(10);
    
    if (orgsError) {
      console.log('‚ùå Erro ao buscar organiza√ß√µes:', orgsError);
    } else {
      console.log('‚úÖ Organiza√ß√µes encontradas:');
      organizations.forEach(org => {
        console.log(`   - ${org.name || org.company_name} (ID: ${org.id}) - Owner: ${org.owner_id}`);
      });
    }
    
    // 3. Listar membros das organiza√ß√µes
    console.log('\n3Ô∏è‚É£ Listando membros das organiza√ß√µes...');
    const { data: members, error: membersError } = await supabase
      .from('organization_members')
      .select('user_id, organization_id, role')
      .limit(20);
    
    if (membersError) {
      console.log('‚ùå Erro ao buscar membros:', membersError);
    } else {
      console.log('‚úÖ Membros encontrados:');
      members.forEach(member => {
        console.log(`   - User: ${member.user_id} | Org: ${member.organization_id} | Role: ${member.role}`);
      });
    }
    
    // 4. Verificar estrutura das tabelas
    console.log('\n4Ô∏è‚É£ Verificando estrutura das tabelas...');
    
    // Verificar se a tabela organizations tem os campos necess√°rios
    const { data: orgSample, error: orgSampleError } = await supabase
      .from('organizations')
      .select('*')
      .limit(1);
    
    if (orgSampleError) {
      console.log('‚ùå Erro ao verificar estrutura da tabela organizations:', orgSampleError);
    } else if (orgSample && orgSample.length > 0) {
      console.log('‚úÖ Campos dispon√≠veis na tabela organizations:');
      const fields = Object.keys(orgSample[0]);
      fields.forEach(field => {
        console.log(`   - ${field}: ${typeof orgSample[0][field]}`);
      });
    }
    
    // 5. Verificar se h√° dados de empresa
    console.log('\n5Ô∏è‚É£ Verificando dados de empresa...');
    const { data: orgData, error: orgDataError } = await supabase
      .from('organizations')
      .select('id, company_name, company_description, company_website, company_sector, company_phone, company_email, company_address, company_city, company_state, company_zip_code, company_country')
      .not('company_name', 'is', null)
      .limit(5);
    
    if (orgDataError) {
      console.log('‚ùå Erro ao buscar dados de empresa:', orgDataError);
    } else {
      console.log('‚úÖ Dados de empresa encontrados:');
      orgData.forEach(org => {
        console.log(`   - ${org.company_name || 'Sem nome'}`);
        console.log(`     Descri√ß√£o: ${org.company_description || 'N/A'}`);
        console.log(`     Website: ${org.company_website || 'N/A'}`);
        console.log(`     Setor: ${org.company_sector || 'N/A'}`);
        console.log(`     Telefone: ${org.company_phone || 'N/A'}`);
        console.log(`     Email: ${org.company_email || 'N/A'}`);
        console.log(`     Endere√ßo: ${org.company_address || 'N/A'}`);
        console.log(`     Cidade: ${org.company_city || 'N/A'}`);
        console.log(`     Estado: ${org.company_state || 'N/A'}`);
        console.log(`     CEP: ${org.company_zip_code || 'N/A'}`);
        console.log(`     Pa√≠s: ${org.company_country || 'N/A'}`);
        console.log('');
      });
    }
    
    // 6. Verificar RLS (Row Level Security)
    console.log('\n6Ô∏è‚É£ Verificando pol√≠ticas RLS...');
    const { data: rlsPolicies, error: rlsError } = await supabase
      .rpc('get_rls_policies', { table_name: 'organizations' })
      .catch(() => ({ data: null, error: { message: 'Fun√ß√£o n√£o dispon√≠vel' } }));
    
    if (rlsError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas RLS:', rlsError.message);
    } else {
      console.log('‚úÖ Pol√≠ticas RLS encontradas:', rlsPolicies);
    }
    
    console.log('\nüéâ Diagn√≥stico conclu√≠do!');
    console.log('\nüí° Poss√≠veis problemas identificados:');
    console.log('   1. Usu√°rio n√£o tem role de owner/admin na organiza√ß√£o');
    console.log('   2. Tabela organizations n√£o tem os campos necess√°rios');
    console.log('   3. Pol√≠ticas RLS impedem a edi√ß√£o');
    console.log('   4. Dados da organiza√ß√£o n√£o existem');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar
debugProfilePermissions();
