// Script para corrigir a URL do logo da empresa no banco de dados
// Execute: node examples/fix-company-logo-url.js

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceRoleKey) {
  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o necess√°rias.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);

async function fixCompanyLogoUrl() {
  try {
    console.log('üîß Corrigindo URL do logo da empresa no banco de dados...\n');
    
    const testOrgId = '596274e5-69c9-4267-975d-18f6af63c9b2';
    
    // 1. Verificar situa√ß√£o atual
    console.log('1Ô∏è‚É£ Verificando situa√ß√£o atual...');
    const { data: currentOrg, error: currentError } = await supabase
      .from('organizations')
      .select('company_logo_url')
      .eq('id', testOrgId)
      .single();
    
    if (currentError) {
      console.error('‚ùå Erro ao buscar organiza√ß√£o:', currentError);
      return;
    }
    
    console.log('üìã URL atual no banco:', currentOrg.company_logo_url);
    
    // 2. Listar arquivos dispon√≠veis no storage
    console.log('\n2Ô∏è‚É£ Verificando arquivos dispon√≠veis no storage...');
    const { data: files, error: filesError } = await supabase.storage
      .from('avatars')
      .list(testOrgId, { limit: 10 });
    
    if (filesError) {
      console.error('‚ùå Erro ao listar arquivos:', filesError);
      return;
    }
    
    const logoFiles = files.filter(f => f.name.includes('company_logo_'));
    console.log(`üìÅ Encontrados ${logoFiles.length} logos da empresa:`);
    logoFiles.forEach((file, index) => {
      console.log(`   ${index + 1}. ${file.name} (${file.created_at})`);
    });
    
    if (logoFiles.length === 0) {
      console.log('‚ùå Nenhum logo da empresa encontrado no storage');
      return;
    }
    
    // 3. Encontrar o arquivo mais recente
    const latestLogo = logoFiles.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0];
    console.log(`\n3Ô∏è‚É£ Logo mais recente: ${latestLogo.name}`);
    
    // 4. Gerar nova URL
    const { data: urlData } = supabase.storage
      .from('avatars')
      .getPublicUrl(`${testOrgId}/${latestLogo.name}`);
    
    const newLogoUrl = urlData.publicUrl;
    console.log(`üîó Nova URL: ${newLogoUrl}`);
    
    // 5. Verificar se a nova URL √© diferente da atual
    if (currentOrg.company_logo_url === newLogoUrl) {
      console.log('‚úÖ URL j√° est√° correta, nenhuma corre√ß√£o necess√°ria');
      return;
    }
    
    // 6. Atualizar o banco de dados
    console.log('\n4Ô∏è‚É£ Atualizando banco de dados...');
    const { data: updateData, error: updateError } = await supabase
      .from('organizations')
      .update({
        company_logo_url: newLogoUrl,
        updated_at: new Date().toISOString()
      })
      .eq('id', testOrgId)
      .select();
    
    if (updateError) {
      console.error('‚ùå Erro ao atualizar organiza√ß√£o:', updateError);
      return;
    }
    
    console.log('‚úÖ Organiza√ß√£o atualizada com sucesso!');
    console.log('üìã Nova URL no banco:', updateData[0].company_logo_url);
    
    // 7. Verificar se a atualiza√ß√£o foi bem-sucedida
    console.log('\n5Ô∏è‚É£ Verificando atualiza√ß√£o...');
    const { data: verifyData, error: verifyError } = await supabase
      .from('organizations')
      .select('company_logo_url, updated_at')
      .eq('id', testOrgId)
      .single();
    
    if (verifyError) {
      console.error('‚ùå Erro ao verificar atualiza√ß√£o:', verifyError);
      return;
    }
    
    console.log('‚úÖ Verifica√ß√£o conclu√≠da:');
    console.log(`   URL: ${verifyData.company_logo_url}`);
    console.log(`   Atualizado em: ${verifyData.updated_at}`);
    
    // 8. Testar acessibilidade da nova URL
    console.log('\n6Ô∏è‚É£ Testando acessibilidade da nova URL...');
    try {
      const response = await fetch(newLogoUrl, { method: 'HEAD' });
      console.log(`‚úÖ URL acess√≠vel: ${response.ok ? 'Sim' : 'N√£o'} (${response.status})`);
    } catch (error) {
      console.log(`‚ùå Erro ao testar URL: ${error.message}`);
    }
    
    console.log('\nüéâ Corre√ß√£o da URL do logo da empresa conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar
fixCompanyLogoUrl();
