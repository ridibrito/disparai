// Script para diagnosticar problemas de salvamento do perfil
// Execute: node examples/debug-profile-save.js

const { createClient } = require('@supabase/supabase-js');

// Configura√ß√µes do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'your-service-role-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugProfileSave() {
  try {
    console.log('üîç Diagnosticando problemas de salvamento do perfil...\n');
    
    // 1. Verificar se o bucket de avatars existe
    console.log('1Ô∏è‚É£ Verificando bucket de avatars...');
    try {
      const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
      
      if (bucketsError) {
        console.log('‚ùå Erro ao listar buckets:', bucketsError);
      } else {
        console.log('‚úÖ Buckets encontrados:');
        buckets.forEach(bucket => {
          console.log(`   - ${bucket.name} (${bucket.public ? 'p√∫blico' : 'privado'})`);
        });
        
        const avatarsBucket = buckets.find(b => b.name === 'avatars');
        if (avatarsBucket) {
          console.log('‚úÖ Bucket "avatars" encontrado');
        } else {
          console.log('‚ùå Bucket "avatars" n√£o encontrado');
        }
      }
    } catch (error) {
      console.log('‚ùå Erro ao verificar buckets:', error.message);
    }
    
    // 2. Verificar estrutura da tabela users
    console.log('\n2Ô∏è‚É£ Verificando estrutura da tabela users...');
    try {
      const { data: userSample, error: userError } = await supabase
        .from('users')
        .select('*')
        .limit(1);
      
      if (userError) {
        console.log('‚ùå Erro ao verificar tabela users:', userError);
      } else if (userSample && userSample.length > 0) {
        console.log('‚úÖ Campos dispon√≠veis na tabela users:');
        const fields = Object.keys(userSample[0]);
        fields.forEach(field => {
          console.log(`   - ${field}: ${typeof userSample[0][field]}`);
        });
      } else {
        console.log('‚ö†Ô∏è Nenhum usu√°rio encontrado na tabela');
      }
    } catch (error) {
      console.log('‚ùå Erro ao verificar tabela users:', error.message);
    }
    
    // 3. Verificar estrutura da tabela organizations
    console.log('\n3Ô∏è‚É£ Verificando estrutura da tabela organizations...');
    try {
      const { data: orgSample, error: orgError } = await supabase
        .from('organizations')
        .select('*')
        .limit(1);
      
      if (orgError) {
        console.log('‚ùå Erro ao verificar tabela organizations:', orgError);
      } else if (orgSample && orgSample.length > 0) {
        console.log('‚úÖ Campos dispon√≠veis na tabela organizations:');
        const fields = Object.keys(orgSample[0]);
        fields.forEach(field => {
          console.log(`   - ${field}: ${typeof orgSample[0][field]}`);
        });
      } else {
        console.log('‚ö†Ô∏è Nenhuma organiza√ß√£o encontrada na tabela');
      }
    } catch (error) {
      console.log('‚ùå Erro ao verificar tabela organizations:', error.message);
    }
    
    // 4. Verificar pol√≠ticas RLS
    console.log('\n4Ô∏è‚É£ Verificando pol√≠ticas RLS...');
    try {
      const { data: policies, error: policiesError } = await supabase
        .rpc('get_rls_policies', { table_name: 'users' })
        .catch(() => ({ data: null, error: { message: 'Fun√ß√£o n√£o dispon√≠vel' } }));
      
      if (policiesError) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas RLS:', policiesError.message);
      } else {
        console.log('‚úÖ Pol√≠ticas RLS encontradas:', policies);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao verificar pol√≠ticas RLS:', error.message);
    }
    
    // 5. Testar upload de arquivo
    console.log('\n5Ô∏è‚É£ Testando upload de arquivo...');
    try {
      // Criar um arquivo de teste
      const testContent = 'test';
      const testFile = new Blob([testContent], { type: 'text/plain' });
      const testFileName = `test-${Date.now()}.txt`;
      
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(testFileName, testFile);
      
      if (uploadError) {
        console.log('‚ùå Erro no upload de teste:', uploadError);
      } else {
        console.log('‚úÖ Upload de teste bem-sucedido:', uploadData);
        
        // Limpar arquivo de teste
        await supabase.storage.from('avatars').remove([testFileName]);
        console.log('üßπ Arquivo de teste removido');
      }
    } catch (error) {
      console.log('‚ùå Erro no teste de upload:', error.message);
    }
    
    console.log('\nüéâ Diagn√≥stico conclu√≠do!');
    console.log('\nüí° Poss√≠veis problemas identificados:');
    console.log('   1. Bucket "avatars" n√£o existe');
    console.log('   2. Pol√≠ticas RLS impedem atualiza√ß√£o');
    console.log('   3. Campos n√£o existem nas tabelas');
    console.log('   4. Problemas de permiss√£o no storage');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar
debugProfileSave();
