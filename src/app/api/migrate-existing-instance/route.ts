import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

// Cliente admin para opera√ß√µes que precisam de mais permiss√µes
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(req: Request) {
  try {
    const { instanceKey } = await req.json();
    
    console.log(`üîÑ Migrando inst√¢ncia ${instanceKey} para formato multi-tenant...`);

    if (!instanceKey) {
      return NextResponse.json({
        ok: false,
        error: 'instanceKey √© obrigat√≥rio'
      }, { status: 400 });
    }

    // Buscar a inst√¢ncia existente
    const { data: existingInstance, error: fetchError } = await supabaseAdmin
      .from('whatsapp_instances')
      .select('*')
      .eq('instance_key', instanceKey)
      .single();

    if (fetchError) {
      console.error('‚ùå Erro ao buscar inst√¢ncia:', fetchError);
      return NextResponse.json({
        ok: false,
        error: 'Inst√¢ncia n√£o encontrada'
      }, { status: 404 });
    }

    console.log('üìã Inst√¢ncia encontrada:', existingInstance);

    // Gerar novo nome multi-tenant
    const organizationId = existingInstance.organization_id;
    const newInstanceKey = `org_${organizationId}_${Date.now()}`;
    const newWebhookUrl = `${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/api/webhooks/whatsapp/${organizationId}`;

    console.log('üÜï Novo formato:', {
      newInstanceKey,
      newWebhookUrl
    });

    // Atualizar a inst√¢ncia no Supabase
    const { data: updatedInstance, error: updateError } = await supabaseAdmin
      .from('whatsapp_instances')
      .update({
        instance_key: newInstanceKey,
        webhook_url: newWebhookUrl,
        updated_at: new Date().toISOString()
      })
      .eq('id', existingInstance.id)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå Erro ao atualizar inst√¢ncia:', updateError);
      return NextResponse.json({
        ok: false,
        error: 'Erro ao atualizar inst√¢ncia: ' + updateError.message
      }, { status: 500 });
    }

    // Atualizar a conex√£o na api_connections se existir
    const { data: existingConnection } = await supabaseAdmin
      .from('api_connections')
      .select('*')
      .eq('instance_id', instanceKey)
      .single();

    if (existingConnection) {
      console.log('üîó Atualizando conex√£o na api_connections...');
      
      const { data: updatedConnection, error: connectionError } = await supabaseAdmin
        .from('api_connections')
        .update({
          instance_id: newInstanceKey,
          name: `WhatsApp Disparai - ${newInstanceKey}`,
          updated_at: new Date().toISOString()
        })
        .eq('id', existingConnection.id)
        .select()
        .single();

      if (connectionError) {
        console.error('‚ö†Ô∏è Erro ao atualizar conex√£o:', connectionError);
      } else {
        console.log('‚úÖ Conex√£o atualizada:', updatedConnection);
      }
    }

    console.log('‚úÖ Migra√ß√£o conclu√≠da:', updatedInstance);

    return NextResponse.json({
      ok: true,
      message: 'Inst√¢ncia migrada com sucesso',
      oldInstanceKey: instanceKey,
      newInstanceKey: newInstanceKey,
      instance: updatedInstance
    });

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
    return NextResponse.json({
      ok: false,
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    }, { status: 500 });
  }
}
